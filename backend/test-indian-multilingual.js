const axios = require('axios');

async function testIndianMultilingualChatbot() {
    console.log('üáÆüá≥ Testing Indian Multilingual Chatbot Functionality');
    console.log('=' .repeat(70));

    const flaskBaseUrl = 'http://localhost:8000';
    
    // Test cases focused on Indian languages
    const testCases = [
        {
            language: 'hi',
            input: '‡§Æ‡•Å‡§ù‡•á ‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶ ‡§î‡§∞ ‡§¨‡•Å‡§ñ‡§æ‡§∞ ‡§π‡•à‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡•Ç‡§Ç?',
            description: 'Hindi (Devanagari script) - Headache & fever'
        },
        {
            language: 'hi', 
            input: 'Mujhe pet mein dard hai aur vomiting ho rahi hai',
            description: 'Hindi (Roman script) - Stomach pain & vomiting'
        },
        {
            language: 'ta',
            input: '‡Æé‡Æ©‡Æï‡Øç‡Æï‡ØÅ ‡Æ§‡Æ≤‡Øà‡Æµ‡Æ≤‡Æø ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æï‡Ææ‡ÆØ‡Øç‡Æö‡Øç‡Æö‡Æ≤‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ',
            description: 'Tamil (Tamil script) - Headache & fever'
        },
        {
            language: 'te',
            input: '‡∞®‡∞æ‡∞ï‡±Å ‡∞§‡∞≤‡∞®‡±ä‡∞™‡±ç‡∞™‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞ú‡±ç‡∞µ‡∞∞‡∞Ç ‡∞â‡∞Ç‡∞¶‡∞ø',
            description: 'Telugu (Telugu script) - Headache & fever'
        },
        {
            language: 'bn',
            input: '‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶•‡¶æ‡¶¨‡ßç‡¶Ø‡¶•‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶ú‡ßç‡¶¨‡¶∞ ‡¶π‡¶ö‡ßç‡¶õ‡ßá',
            description: 'Bengali (Bengali script) - Headache & fever'
        },
        {
            language: 'en',
            input: 'I have cough and cold symptoms',
            description: 'English - Common cold symptoms'
        }
    ];

    console.log('üîç Testing Language Detection:');
    for (const testCase of testCases) {
        const detectedLang = detectIndianLanguage(testCase.input);
        const isCorrect = detectedLang === testCase.language;
        console.log(`${isCorrect ? '‚úÖ' : '‚ùå'} "${testCase.input.substring(0, 30)}..." ‚Üí Expected: ${testCase.language}, Detected: ${detectedLang}`);
    }

    console.log('\nüí¨ Testing Multilingual AI Responses:');
    for (const testCase of testCases) {
        console.log(`\nüìù ${testCase.description}`);
        console.log(`Input: ${testCase.input}`);
        console.log(`Language: ${testCase.language}`);

        try {
            const response = await axios.post(`${flaskBaseUrl}/api/chat`, {
                input: testCase.input,
                language: testCase.language,
                responseLanguage: testCase.language
            }, {
                timeout: 20000
            });

            if (response.status === 200 && response.data.response) {
                console.log(`‚úÖ Response received (${response.data.response.length} chars)`);
                
                // Check if response is in expected language
                const hasExpectedLanguage = checkIndianLanguageInResponse(response.data.response, testCase.language);
                console.log(`üåê Language check: ${hasExpectedLanguage ? '‚úÖ Correct' : '‚ö†Ô∏è Mixed/Uncertain'}`);
                
                // Show preview
                const preview = response.data.response.substring(0, 100).replace(/\n/g, ' ');
                console.log(`Preview: ${preview}...`);
            } else {
                console.log('‚ùå No valid response received');
            }
        } catch (error) {
            if (error.response) {
                console.log(`‚ùå HTTP Error ${error.response.status}: ${error.response.data?.error || 'Unknown error'}`);
            } else if (error.request) {
                console.log('‚ùå Network Error: No response received - Make sure Flask server is running on port 8000');
            } else {
                console.log(`‚ùå Error: ${error.message}`);
            }
        }
        console.log('-'.repeat(50));
    }

    // Test automatic language switching
    console.log('\nüîÑ Testing Auto Language Switching:');
    const mixedInputs = [
        'Hello, mujhe help chahiye',
        'Hi doctor, ‡§Æ‡•Å‡§ù‡•á ‡§™‡•á‡§ü ‡§¶‡§∞‡•ç‡§¶ ‡§π‡•à',
        '‡Æ®‡ÆÆ‡∞∏‡ßç‡¶ï‡¶æ‡¶∞, I need medical advice'
    ];

    for (const input of mixedInputs) {
        const detected = detectIndianLanguage(input);
        console.log(`"${input}" ‚Üí Auto-detected: ${detected}`);
    }
}

function detectIndianLanguage(text) {
    const lowerText = text.toLowerCase();
    
    // Script-based detection
    if (/[\u0900-\u097F]/.test(text)) return 'hi'; // Devanagari
    if (/[\u0B80-\u0BFF]/.test(text)) return 'ta'; // Tamil
    if (/[\u0C00-\u0C7F]/.test(text)) return 'te'; // Telugu
    if (/[\u0980-\u09FF]/.test(text)) return 'bn'; // Bengali
    
    // Roman script detection
    const hindiWords = ['mujhe', 'hai', 'kya', 'aap', 'karun', 'dard', 'pet', 'sar'];
    if (hindiWords.some(word => lowerText.includes(word))) return 'hi';
    
    // English check
    if (/^[a-zA-Z\s.,!?'"()-]+$/.test(text)) return 'en';
    
    return 'hi'; // Default to Hindi for Indian context
}

function checkIndianLanguageInResponse(response, expectedLang) {
    const lowerResponse = response.toLowerCase();
    
    switch (expectedLang) {
        case 'hi':
            return /[\u0900-\u097F]/.test(response) || 
                   lowerResponse.includes('‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ') || 
                   lowerResponse.includes('‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø') ||
                   lowerResponse.includes('‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§∞‡§£');
        case 'ta':
            return /[\u0B80-\u0BFF]/.test(response) ||
                   lowerResponse.includes('‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ') ||
                   lowerResponse.includes('‡Æö‡ØÅ‡Æï‡Ææ‡Æ§‡Ææ‡Æ∞');
        case 'te':
            return /[\u0C00-\u0C7F]/.test(response) ||
                   lowerResponse.includes('‡∞µ‡±à‡∞¶‡±ç‡∞Ø') ||
                   lowerResponse.includes('‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø');
        case 'bn':
            return /[\u0980-\u09FF]/.test(response) ||
                   lowerResponse.includes('‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ') ||
                   lowerResponse.includes('‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø');
        case 'en':
            return lowerResponse.includes('medical') || 
                   lowerResponse.includes('health') || 
                   lowerResponse.includes('consult');
        default:
            return true;
    }
}

// Run the test
if (require.main === module) {
    testIndianMultilingualChatbot().catch(console.error);
}

module.exports = { testIndianMultilingualChatbot };
