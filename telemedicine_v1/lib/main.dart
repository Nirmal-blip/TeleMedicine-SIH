import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'pages/VerifyEmailPage.dart';
import 'firebase_options.dart'; // generated by flutterfire configure
import 'pages/home_page.dart';
import 'pages/appointments_page.dart';
import 'pages/pharmacy_page.dart';
import 'pages/messages_page.dart';
import 'pages/profile_page.dart';
import './widgets/splash_screen.dart';
import 'auth/auth_page.dart'; // create this file next
import 'pages/onboardingscreen.dart';
import 'package:shared_preferences/shared_preferences.dart';


void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  final prefs = await SharedPreferences.getInstance();
  // await prefs.remove("hasSeenOnboarding");
  final hasSeenOnboarding = prefs.getBool("hasSeenOnboarding") ?? false;

  runApp(MedApp(hasSeenOnboarding: hasSeenOnboarding));
}

class MedApp extends StatelessWidget {
  final bool hasSeenOnboarding;
  const MedApp({super.key, required this.hasSeenOnboarding});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: "Telemedicine App",
      theme: ThemeData(
        primarySwatch: Colors.green,
        scaffoldBackgroundColor: Colors.white,
      ),
      home: hasSeenOnboarding
          ? StreamBuilder<User?>(
        stream: FirebaseAuth.instance.authStateChanges(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return SplashScreen();
          }
          if (snapshot.hasData) {
            return const MainScreen();
          }
          return const AuthPage();
        },
      )
          : const OnboardingScreen(),
    );
  }
}

class MainScreen extends StatefulWidget {
  const MainScreen({super.key});

  @override
  _MainScreenState createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen> {
  int _currentIndex = 0;

  final List<Widget> _pages = [
    HomePage(),
    AppointmentsPage(),
    PharmacyPage(),
    MessagesPage(),
    ProfilePage(),
  ];

  @override
  Widget build(BuildContext context) {
    final double screenWidth = MediaQuery.of(context).size.width;
    final double itemWidth = screenWidth / 5; // 5 items
    final double circleDiameter = 70;

    // X position of circle center
    final double circleX = (_currentIndex * itemWidth) + itemWidth / 2;

    return Scaffold(
      body: _pages[_currentIndex],

      bottomNavigationBar: SizedBox(
        height: 80,
        child: Stack(
          clipBehavior: Clip.none,
          alignment: Alignment.bottomCenter,
          children: [
            // ðŸ”¹ Custom background with a moving gap
            CustomPaint(
              size: Size(screenWidth, 80),
              painter: _NavBarPainter(circleX: circleX, circleRadius: circleDiameter / 2),
            ),

            // ðŸ”¹ Icons row
            SizedBox(
              height: 60,
              child: BottomNavigationBar(
                backgroundColor: Colors.green,
                currentIndex: _currentIndex,
                onTap: (index) => setState(() => _currentIndex = index),
                type: BottomNavigationBarType.fixed,
                selectedItemColor: Colors.transparent, // hide default selection
                unselectedItemColor: Colors.white,
                showUnselectedLabels: true,
                elevation: 0,
                items: const [
                  BottomNavigationBarItem(icon: Icon(Icons.home), label: "Home"),
                  BottomNavigationBarItem(icon: Icon(Icons.calendar_today), label: "Appointments"),
                  BottomNavigationBarItem(icon: Icon(Icons.local_pharmacy), label: "Pharmacy"),
                  BottomNavigationBarItem(icon: Icon(Icons.message), label: "Messages"),
                  BottomNavigationBarItem(icon: Icon(Icons.person), label: "Profile"),
                ],
              ),
            ),

            // ðŸ”¹ Circle indicator
            AnimatedPositioned(
              duration: const Duration(milliseconds: 300),
              curve: Curves.easeInOut,
              bottom: 20, // sits inside the notch
              left: circleX - circleDiameter / 2,
              child: Container(
                height: circleDiameter,
                width: circleDiameter,
                decoration: BoxDecoration(
                  color: Colors.white,
                  shape: BoxShape.circle,
                  border: Border.all(color: Colors.green, width: 3),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.green.withOpacity(0.3),
                      blurRadius: 8,
                      spreadRadius: 1,
                      offset: const Offset(0, 3),
                    ),
                  ],
                ),
                child: Icon(
                  _getIconForIndex(_currentIndex),
                  color: Colors.green,
                  size: 31,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // âœ… Icon for selected tab
  IconData _getIconForIndex(int index) {
    switch (index) {
      case 0:
        return Icons.home;
      case 1:
        return Icons.calendar_today;
      case 2:
        return Icons.local_pharmacy;
      case 3:
        return Icons.message;
      case 4:
        return Icons.person;
      default:
        return Icons.home;
    }
  }
}

// ðŸŽ¨ Custom painter that carves a "gap" for the circle
class _NavBarPainter extends CustomPainter {
  final double circleX;
  final double circleRadius;

  _NavBarPainter({required this.circleX, required this.circleRadius});

  @override
  void paint(Canvas canvas, Size size) {
    final Paint paint = Paint()..color = Colors.white..style = PaintingStyle.fill;

    final Path path = Path()
      ..moveTo(0, 0)
      ..lineTo(circleX - circleRadius - 16, 0)
      ..quadraticBezierTo(circleX - circleRadius, 0, circleX - circleRadius + 8, 20)
      ..arcToPoint(
        Offset(circleX + circleRadius - 8, 20),
        radius: Radius.circular(circleRadius + 8),
        clockwise: false,
      )
      ..quadraticBezierTo(circleX + circleRadius, 0, circleX + circleRadius + 16, 0)
      ..lineTo(size.width, 0)
      ..lineTo(size.width, size.height)
      ..lineTo(0, size.height)
      ..close();

    canvas.drawShadow(path, Colors.black12, 6, true);
    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(_NavBarPainter oldDelegate) =>
      oldDelegate.circleX != circleX;
}